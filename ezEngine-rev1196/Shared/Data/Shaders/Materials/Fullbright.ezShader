[PLATFORMS] 
ALL

[PERMUTATIONS]

ALPHATEST
PICKING
EDITOR_RENDER_MODE

[RENDERSTATE]

#include <Shaders/Editor/EditorRenderModes.h>

#if (EDITOR_RENDER_MODE == ERM_WIREFRAME_MONOCHROME) || (EDITOR_RENDER_MODE == ERM_WIREFRAME_COLOR)
  WireFrame = true
#endif

[VERTEXSHADER]

#include <Shaders/Materials/Materials.inc>
#include <Shaders/Materials/DefaultMaterialCB.inc>

#ifdef PLATFORM_DX11

VS_OUT main(VS_IN Input)
{
  VS_OUT RetVal;
  RetVal.Position = mul(ObjectToScreenMatrix, float4(Input.Position, 1.0f));
  RetVal.Normal = Input.Normal;
  RetVal.TexCoord0 = Input.TexCoord0;

  return RetVal;
}

#endif


[PIXELSHADER]

#include <Shaders/Materials/Materials.inc>
#include <Shaders/Materials/DefaultMaterialCB.inc>
#include <Shaders/Editor/EditorRenderModes.h>

#ifdef PLATFORM_DX11

Texture2D TexDiffuse;
SamplerState TexDiffuseSampler;

#if ALPHATEST
  Texture2D TexAlphaMask;
  SamplerState TexAlphaMaskSampler;
#endif

float4 main(PS_IN Input) : SV_Target
{
#if ALPHATEST == 1
  float fMask = TexAlphaMask.Sample(TexAlphaMaskSampler, Input.TexCoord0).r;
  
  #if (EDITOR_RENDER_MODE != ERM_WIREFRAME_MONOCHROME) && (EDITOR_RENDER_MODE != ERM_WIREFRAME_COLOR)
    clip(fMask < 0.1f ? -1 : 1);
  #endif
#endif

#if PICKING == 1
  float4 IdCol;
  IdCol.r = (GameObjectID & 255) / 255.0;
  IdCol.g = (GameObjectID >> 8 & 255) / 255.0;
  IdCol.b = (GameObjectID >> 16 & 255) / 255.0;
  IdCol.a = (GameObjectID >> 24 & 255) / 255.0;
  
  return IdCol;
#else

  #if (EDITOR_RENDER_MODE == ERM_WIREFRAME_MONOCHROME)
    return float4(1, 1, 1, 1);
  #endif

  #if (EDITOR_RENDER_MODE == ERM_TEXCOORDS_UV0)
    // Would need to be gamma corrected
    return float4(frac(Input.TexCoord0), 0, 1);
  #endif

  #if (EDITOR_RENDER_MODE == ERM_VERTEX_NORMALS)
    // Would need to be gamma corrected
    return float4(Input.Normal.xyz * 0.5 + 0.5, 1);
  #endif

  #if (EDITOR_RENDER_MODE == ERM_PIXEL_DEPTH)
    float depth = 1.0 - min(1.0, max(0, (Input.Position.z / Input.Position.w)));
    depth = depth * depth * depth * depth;
    return float4(depth, depth, depth, 1);
  #endif

  return TexDiffuse.Sample(TexDiffuseSampler, Input.TexCoord0) * MeshColor;
#endif
}

#endif

